# This code was auto generated by with these options:
# http://andrewray.me/bash-prompt-builder/index.html#git=1&color-git=3&color-git-prefix=3&git-ahead=1&color-git-ahead=6b&git-modified=1&color-git-modified=3&git-conflicted=1&color-git-conflicted=1&git-revno=1&color-git-revno=3&git-bisect=1&color-git-bisect=5&option-submodule=1&color-option-submodule=5&git-ontag=1&color-git-ontag=3&color-hg=5&color-hg-prefix=5&color-hg-modified=5&color-hg-conflicted=1&color-hg-revno=5&color-hg-bisect=3&color-hg-patches=3&svn=1&color-svn=6&svn-modified=1&color-svn-modified=6&svn-revno=1&color-svn-revno=6&option-modified=%E2%96%B3&option-conflict=%E2%98%A2&color-option-conflict=3&max-conflicted-files=2&option-nobranch=no%20branch!&color-option-nobranch=1&bisecting-text=bisecting&submodule-text=%5Bsubmodule%5D%20

MAX_CONFLICTED_FILES=2
DELTA_CHAR="Δ"
CONFLICT_CHAR="☢"
BISECTING_TEXT="bisecting"
NOBRANCH_TEXT="⁉"
SUBMODULE_TEXT="⊂"

if [ -n "$TERM" ]; then
    # Colors for prompt
    COLOR_RED=$(tput sgr0 && tput setaf 1)
    COLOR_GREEN=$(tput sgr0 && tput setaf 2)
    COLOR_YELLOW=$(tput sgr0 && tput setaf 3)
    COLOR_BLUE=$(tput sgr0 && tput setaf 4)
    COLOR_MAGENTA=$(tput sgr0 && tput setaf 5)
    COLOR_CYAN=$(tput sgr0 && tput setaf 6)
    COLOR_GRAY=$(tput sgr0 && tput setaf 7)
    COLOR_WHITE=$(tput sgr0 && tput setaf 7 && tput bold)
    COLOR_LIGHTRED=$(tput sgr0 && tput setaf 1 && tput bold)
    COLOR_LIGHTGREEN=$(tput sgr0 && tput setaf 2 && tput bold)
    COLOR_LIGHTYELLOW=$(tput sgr0 && tput setaf 3 && tput bold)
    COLOR_LIGHTBLUE=$(tput sgr0 && tput setaf 4 && tput bold)
    COLOR_LIGHTMAGENTA=$(tput sgr0 && tput setaf 5 && tput bold)
    COLOR_LIGHTCYAN=$(tput sgr0 && tput setaf 6 && tput bold)

    COLOR_RESET=$(tput sgr0)

    TPUT_RC="$(tput rc)"
    TPUT_SC="$(tput sc)"
fi


_svn_dir=""
function _svn_check {
    parent=""
    grandparent="."

    while [ -d "$grandparent/.svn" ]; do
        parent=$grandparent
        grandparent="$parent/.."
    done

    if [ ! -z "$parent" ]; then
        _svn_dir=`cd $parent; pwd`
        return 0
    else
        return 1
    fi
}

_git_dir=""
function _git_check {
    _git_dir=`command git rev-parse --show-toplevel 2> /dev/null`
    if [[ "$_git_dir" == "" ]]; then
        return 1
    else
        return 0
    fi
}

function is_submodule() {
    local parent_git=`cd "$_git_dir/.." && command git rev-parse --show-toplevel 2> /dev/null`
    if [[ -n $parent_git ]]; then
        local submodules=`cd $parent_git && command git submodule --quiet foreach 'echo $path'`
        for line in $submodules; do
            cd "$parent_git/$line"
            if [[ `pwd` = $_git_dir ]]; then return 0; fi
        done
    fi
    return 1
}

dvcs_function="
    # Figure out what repo we are in
    _git_check \
        || _svn_check

    # Build the prompt!
    prompt=\"\"

    # If we are in git ...
    if [ -n \"\$_git_dir\" ]; then
        # find current branch
        gitBranch=\$(command git symbolic-ref HEAD 2> /dev/null)
        gitStatus=\`command git status -b --porcelain\`

        # Figure out current branch, or if we are bisecting, or lost in space
        bisecting=\"\"
        noBranch=\"\"
        if [ -z \"\$gitBranch\" ]; then
            bisect=\$(command git rev-list --bisect 2> /dev/null | cut -c1-7)
            if [ -z \"\$bisect\" ]; then
                noBranch=True
                gitBranch=\"\\[\$COLOR_RED\\]\$NOBRANCH_TEXT\\[\$COLOR_YELLOW\\]\"
            else
                bisecting=\"\\[\$COLOR_MAGENTA\\]\$BISECTING_TEXT:\"\$bisect\"\\[\$COLOR_YELLOW\\]\"
                gitBranch=\"\"
            fi
        fi

        # changed *tracked* files in local directory?
        gitChange=\$(echo \"\$gitStatus\" | egrep '^D|^.D|^M|^.M|^A|^.A')
        if [ -n \"\$gitChange\" ]; then
            gitChange=\"\\[\$COLOR_YELLOW\\] \\[$TPUT_SC\\]  \\[$TPUT_RC\\]\$DELTA_CHAR \"
        fi

        # output the branch and changed character if present
        prompt=\$prompt\"\\[\$COLOR_YELLOW\\] (\"

        if is_submodule; then
            prompt=\$prompt\"\\[\$COLOR_MAGENTA\\]\$SUBMODULE_TEXT\\[\$COLOR_YELLOW\\]\"
        fi

        prompt=\$prompt\$prefix\${gitBranch#refs/heads/}\$bisecting
        revNo=\$(command git rev-parse HEAD 2> /dev/null | cut -c1-7) || return

        # If bisecting don't output revno
        if [ -z \"\$bisecting\" ] && [ -z \"\$noBranch\" ];then
            prompt=\$prompt\":\$revNo\"
        fi
        tag=\`command git describe --tags --exact 2> /dev/null\`
        if [ -n \"\$tag\" ]; then
            prompt=\"\$prompt\\[\$COLOR_YELLOW\\] \\\"\$tag\\\"\\[\$COLOR_YELLOW\\]\"
        fi
        prompt=\$prompt\"\$gitChange\\[\$COLOR_YELLOW\\])\\[\$COLOR_RESET\\]\"

        # How many local commits do you have ahead of origin?
        num=\$(echo \"\$gitStatus\" | grep '^##.*\\\[.*\\\]' | sed -E -e \"s/.*\\\[(.*)\\\].*/\\\1/g; s/ahead /+/g; s/behind /-/g; s/, /\\\//g\")
        if [ -n \"\$num\" ]; then
            prompt=\$prompt\"\\[\$COLOR_CYAN\\] \$num\"
        fi

        # any conflicts? (sed madness is to remove line breaks)
        files=\$(command git ls-files -u | cut -f 2 | sort -u | sed '$(($MAX_CONFLICTED_FILES+1)),1000d' |  sed -e :a -e '\$!N;s/\\\n/, /;ta' -e 'P;D')
    fi


    # If we are in subversion ...
    if [ -n \"\$_svn_dir\" ]; then

        # changed files in local directory? NOTE: This command is the slowest of the bunch
        svnChange=\$(svn status | grep \"^M|^!\" | wc -l)
        if [[ \"\$svnChange\" != \"       0\" ]]; then
            svnChange=\"\\[\$COLOR_CYAN\\] \\[$TPUT_SC\\]  \\[$TPUT_RC\\]\$DELTA_CHAR \"
        else
            svnChange=\"\"
        fi

        # revision number (instead of branch name, silly svn)
        revNo=\`svnversion --no-newline | sed -e 's/M$//' \`
        prompt=\$prompt\"\\[\$COLOR_CYAN\\] (svn\"
        prompt=\$prompt\"\\[\$COLOR_CYAN\\] :\$revNo\\[\$COLOR_CYAN\\] \"
        prompt=\$prompt\"\$svnChange)\\[\$COLOR_RESET\\]\"
    fi

    # Show conflicted files if any
    if [ -n \"\$files\" ]; then
        prompt=\$prompt\" \\[\$COLOR_RED\\](\\[\$COLOR_YELLOW\\]\"
        prompt=\$prompt\"\\[$TPUT_SC\\]  \\[$TPUT_RC\\]\\[\$COLOR_YELLOW\\]\$CONFLICT_CHAR \"
        prompt=\$prompt\"\\[\$COLOR_RED\\] \${files})\"
    fi

    echo -e \$prompt"
# End code auto generated by http://andrewray.me/bash-prompt-builder/index.html

PS1="\u@\h:\W\$(${dvcs_function})\[$COLOR_RESET\]\n:; "

case $TERM in
    gnome*|nxterm|xterm*|rxvt*|konsole*)
        PROMPT_COMMAND='echo -ne "\033]0;${PWD}\007"'
        ;;
    *)
        ;;
esac

